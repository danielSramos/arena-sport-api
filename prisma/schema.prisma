// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permissions {
  id                 String               @id
  permission         String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  profilePermissions ProfilePermissions[]

  @@map("permissions")
}

model Profiles {
  id                 String               @id
  ProfileName        String
  profilePermissions ProfilePermissions[]
  userProfiles       UserProfiles[]

  @@map("profiles")
}

model ProfilePermissions {
  profileId    String
  permissionId String

  profiles    Profiles    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  permissions Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([profileId, permissionId])
  @@map("profile_permissions")
}

model Users {
  id               String             @id
  name             String
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userProfiles     UserProfiles[]
  userPhoneNumbers UserPhoneNumbers[]

  @@map("users")
}

model UserProfiles {
  id        String @unique
  userId    String
  profileId String

  users    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  profiles Profiles @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([userId, profileId])
  @@map("user_profiles")
}

model PhoneNumbers {
  id               String             @id
  number           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userPhoneNumbers UserPhoneNumbers[]

  @@map("phone_numbers")
}

model UserPhoneNumbers {
  id            String @unique
  userId        String
  phoneNumberId String

  users        Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumbers PhoneNumbers @relation(fields: [phoneNumberId], references: [id], onDelete: Cascade)

  @@id([userId, phoneNumberId])
  @@map("user_phone_numbers")
}

model Events {
  id          String        @id
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  eventStatus EventStatus[]

  @@map("events")
}

model Status {
  id          String        @id
  status      String
  nameEvent   String
  eventStatus EventStatus[]

  @@map("status")
}

model EventStatus {
  id       String @unique
  eventId  String
  statusId String

  event  Events @relation(fields: [eventId], references: [id], onDelete: Cascade)
  status Status @relation(fields: [statusId], references: [id], onDelete: Cascade)

  @@id([eventId, statusId])
  @@map("event_status")
}

model Courts {
  id              String            @id
  type            String
  name            String
  scheduleId      String
  courtsSchedules CourtsSchedules[]

  schedules Schedules @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("courts")
}

model Schedules {
  id              String            @id
  data            String
  statusId        String
  courts          Courts[]
  courtsSchedules CourtsSchedules[]

  @@map("schedules")
}

model CourtsSchedules {
  id         String @unique
  courtsId   String
  scheduleId String

  courts    Courts    @relation(fields: [courtsId], references: [id], onDelete: Cascade)
  schedules Schedules @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@id([courtsId, scheduleId])
  @@map("courts_schedules")
}
